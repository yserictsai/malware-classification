
col = X.columns
col_ll = col.tolist()
del col


# miss value

from sklearn.preprocessing import Imputer

def impute(X_train, X_test):
    X_train = training_data.drop(['FileID','Label'],1)
    X_test = testing_data.drop(['FileID','Label'],1)
    
    imputer = Imputer()
    X_train_impute = imputer.fit_transform(X_train)
    X_test_impute = imputer.fit_transform(X_test)

    X_train_imputed_df = pd.DataFrame(X_train_impute)
    X_test_imputed_df = pd.DataFrame(X_test_impute)

    X_train_imputed_df.columns = X_train.columns
    X_test_imputed_df.columns = X_test.columns
    
    X_train_imputed_df.index = X_train.index
    X_test_imputed_df.index = X_test.index

    return X_train_imputed_df, X_test_imputed_df



# data preprocessing
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import minmax_scale
from sklearn.preprocessing import MaxAbsScaler
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import RobustScaler
from sklearn.preprocessing import Normalizer
from sklearn.preprocessing.data import QuantileTransformer


def transform(X, y):
    if y == 'StandardScaler_':
        scaler = StandardScaler()
        data = scaler.fit_transform(X)
        return data
    elif y == 'MaxAbsScaler_':
        scaler = MaxAbsScaler()
        data = scaler.fit_transform(X)
        return data
    elif y == 'MinMaxScale_':
        scaler = MinMaxScaler()
        data = scaler.fit_transform(X)
    elif y == 'minmax_scale_':
        scaler = minmax_scale()
        data = scaler.fit_transform(X)    
        return data
    elif y == 'RobustScaler_':
        scaler = RobustScaler(quantile_range=(25, 75))
        data = scaler.fit_transform(X)
        return data
    elif y == 'QuantileTransformer_':
        scaler = QuantileTransformer(output_distribution='uniform')
        data = scaler.fit_transform(X)
        return data
    elif y == 'Normalizer_':
        scaler = Normalizer()
        data = scaler.fit_transform(X)
        return data
        
def meanNormal(X):
    X = (X - np.mean(X)) / (np.max(X) - np.min(X))
    return X

