import gc
import pickle
import numpy as np
import pandas as pd
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import train_test_split
from sklearn.cross_validation import StratifiedKFold
from xgboost import XGBClassifier



K=5
skf = StratifiedKFold(n_splits=K, random_state=9527, shuffle=True)



i = 0
temp_auc = 0
for train, val in skf.split(X_train, y_train):
    eval_set = (X_train[val], y_train[val]) 
    model_xgb = xgb.fit(X_train[train], y_train[train], eval_set=eval_set, verbose=True)
    
    train_pred_proba = model_xgb.predict_proba(X_train[train])[:,1]
    train_roc_auc = roc_auc_score(y_train[train], train_pred_proba)

    val_pred_proba = model_xgb.predict_proba(X_train[val])[:,1]
    val_roc_auc = roc_auc_score(y_train[val], val_pred_proba)

    print('roc_auc: %.2f%%' % val_roc_auc)
    
    if val_roc_auc > temp_auc:
        y_pred_label = model_xgb.predict(X_test)
        final_val_roc_auc = val_roc_auc

    temp_auc = val_roc_auc
    i = i + 1


# Semi
y_test = y_pred_label.copy()

ntrain = X_train.shape[0]
ntest = X_test.shape[0]
SEED = 9527 # for reproducibility
NFOLDS = 5 # set folds for out-of-fold prediction
skf_c2 = SKF(y_test, n_folds=5)

stack_train = np.zeros((ntest,))
for i, (train_fold, validate) in enumerate(skf_c2):
    X_train_semi, X_validate, y_train_semi, y_validate = X_test[train_fold,:], X_test[validate,:], y_test[train_fold], y_test[validate]
    X_train_semi = np.concatenate((X_train, X_train_semi))
    y_train_semi = np.concatenate((y_train, y_train_semi))
    xgb.fit(X_train_semi,y_train_semi)

    stack_train[validate] = xgb.predict_proba(X_validate)[:,1]


y_predF = pd.DataFrame(stack_train)
submission = pd.concat([pd.DataFrame(testing_data['FileID']), y_predF], axis=1)
submission.to_csv('trend_submission_nonauto.csv', index=False, header=False) 