import gc
import numpy as np
import pandas as pd
from scipy.stats import randint as sp_randint
from scipy.stats import uniform as sp_uni
from sklearn.model_selection import RandomizedSearchCV
from sklearn.cross_validation import StratifiedKFold as SKF
from sklearn.model_selection import StratifiedKFold
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, AdaBoostClassifier, GradientBoostingClassifier
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import Imputer
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from catboost import CatBoostClassifier




# load data

file_path = 'trend_v9s.csv'
train_csv_path = '/data/examples/trend/data/training-set.csv'
test_csv_path = '/data/examples/trend/data/testing-set.csv'

training_set = pd.read_csv(train_csv_path, encoding='utf-8', names=['FileID','Label'])
testing_set = pd.read_csv(test_csv_path, encoding='utf-8', names=['FileID','Label'])

def load_data(file_path, train_csv_path, test_csv_path):
	data = pd.read_csv(file_path, encoding='utf-8', low_memory=False)
	#data = data.rename(columns={'FileId': 'FileID'})
	data = data.fillna(0)
	
	training_set = pd.read_csv(train_csv_path, encoding='utf-8', names=['FileID','Label'])
	training_data = pd.merge(data, training_set, on=['FileID'], how='inner')

	testing_set = pd.read_csv(test_csv_path, encoding='utf-8', names=['FileID','Label'])
	testing_data = pd.merge(data, testing_set, on=['FileID'], how='inner')

	return data, training_data, testing_data


data, training_data, testing_data = load_data(file_path, train_csv_path, test_csv_path)


def split_data(train, test):
	train_data = train.drop(['FileID','Label'],1)

	X_train = train_data.values  # Creates an array of the train data
	y_train = train['Label'].ravel()


	test_data = test.drop(['FileID','Label'],1)
	X_test = test_data.values    # Creats an array of the test data

	return X_train, y_train, X_test

X_train, y_train, X_test = split_data(training_data, testing_data)




# Model
DEPTH = 3
OD_PVAL = 0.01
OD_TYPE = 'IncToDec'
LEARNING_RATE = 0.07
N_ESTIMATORS = 1888
EVAL_METRIC = 'AUC'
SCALE_POS_WEIGHT = 4
THREAD_COUNT = 5

xgb = CatBoostClassifier(depth=DEPTH,
                         od_pval=OD_PVAL,
                         od_type=OD_TYPE,
                         learning_rate=LEARNING_RATE,
                         n_estimators=N_ESTIMATORS,
                         eval_metric=EVAL_METRIC,
                         scale_pos_weight=SCALE_POS_WEIGHT,
                         thread_count=THREAD_COUNT,
                         random_seed=426)



K=5
skf = StratifiedKFold(n_splits=K, random_state=9527, shuffle=True)



i = 0
temp_auc = 0
for train, val in skf.split(X_train, y_train):
    eval_set = (X_train[val], y_train[val]) 
    model_xgb = xgb.fit(X_train[train], y_train[train], eval_set=eval_set, verbose=True)
    
    train_pred_proba = model_xgb.predict_proba(X_train[train])[:,1]
    train_roc_auc = roc_auc_score(y_train[train], train_pred_proba)

    val_pred_proba = model_xgb.predict_proba(X_train[val])[:,1]
    val_roc_auc = roc_auc_score(y_train[val], val_pred_proba)

    print('roc_auc: %.2f%%' % val_roc_auc)
    
    if val_roc_auc > temp_auc:
        y_pred_label = model_xgb.predict(X_test)
        final_val_roc_auc = val_roc_auc

    temp_auc = val_roc_auc
    i = i + 1




y_test = y_pred_label.copy()



ntrain = X_train.shape[0]
ntest = X_test.shape[0]
SEED = 9527 # for reproducibility
NFOLDS = 5 # set folds for out-of-fold prediction
skf_c2 = SKF(y_test, n_folds=5)


stack_train = np.zeros((ntest,))
for i, (train_fold, validate) in enumerate(skf_c2):
    X_train_semi, X_validate, y_train_semi, y_validate = X_test[train_fold,:], X_test[validate,:], y_test[train_fold], y_test[validate]
    X_train_semi = np.concatenate((X_train, X_train_semi))
    y_train_semi = np.concatenate((y_train, y_train_semi))
    xgb.fit(X_train_semi,y_train_semi)

    stack_train[validate] = xgb.predict_proba(X_validate)[:,1]


y_predF = pd.DataFrame(stack_train)
submission = pd.concat([pd.DataFrame(testing_data['FileID']), y_predF], axis=1)
submission.to_csv('trend_submission_cat.csv', index=False, header=False) 



